{"version":3,"file":"index.js","mappings":"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","sources":["webpack://default/./src/actions/download.ts","webpack://default/./src/actions/index.ts","webpack://default/./src/actions/init.ts","webpack://default/./src/actions/upload.ts","webpack://default/./src/cli.ts","webpack://default/./src/index.ts","webpack://default/./src/lib/config.ts","webpack://default/./src/lib/fileInfo.ts","webpack://default/./src/lib/log.ts","webpack://default/./src/lib/projectConfig.ts","webpack://default/./src/lib/task.ts","webpack://default/./src/lib/types.ts","webpack://default/external commonjs \"axios\"","webpack://default/external commonjs \"chalk\"","webpack://default/external commonjs \"glob\"","webpack://default/external commonjs \"inquirer\"","webpack://default/external commonjs \"listr\"","webpack://default/external commonjs \"yargs\"","webpack://default/external commonjs \"yargs/helpers\"","webpack://default/external node-commonjs \"fs\"","webpack://default/external node-commonjs \"path\"","webpack://default/webpack/bootstrap","webpack://default/webpack/startup"],"sourcesContent":["import axios from 'axios';\nimport {\n    getProjectConfig,\n    missingProjectConfigFile,\n} from '../lib/projectConfig';\nimport { Options } from '../lib/types';\nimport { logError, logHeader } from '../lib/log';\nimport { getDownloadTasksFromTranslationFiles } from '../lib/task';\nimport { writeContent } from '../lib/fileInfo';\nimport { ListrTask } from 'listr';\n\ninterface DownloadResponse {\n    content: string;\n}\n\nexport default (options: Options): ListrTask[] => {\n    logHeader('DOWNLOAD');\n\n    if (!options.existsProjectConfigFile) {\n        return missingProjectConfigFile(options);\n    }\n\n    const projectConfig = getProjectConfig(options.configFilePath);\n    return getDownloadTasksFromTranslationFiles(\n        projectConfig.translation_files,\n        async (translationFile, fileInfo): Promise<void> => {\n            try {\n                const { data } = await axios.get<DownloadResponse>(\n                    `/api/translation-files/${\n                        translationFile.id ?? null\n                    }/download`,\n                    {\n                        params: {\n                            locale: fileInfo.locale,\n                            api_key: projectConfig.project_api_key,\n                        },\n                    },\n                );\n                writeContent(fileInfo.path, data.content);\n            } catch (error: any) {\n                logError(error.message);\n                return Promise.reject(error);\n            }\n        },\n    );\n};\n","export { default as download } from './download';\nexport { default as init } from './init';\nexport { default as upload } from './upload';\n","import axios from 'axios';\nimport { Options, TranslationFile } from '../lib/types';\nimport {\n    createProjectConfig,\n    overwriteNotAllowedProjectConfigFile,\n    saveProjectConfig,\n} from '../lib/projectConfig';\nimport { logError, logHeader } from '../lib/log';\nimport { ListrTask } from 'listr';\n\ninterface InitResponse {\n    translation_files: TranslationFile[];\n    supported_languages: string[];\n}\n\nexport default (options: Options): ListrTask[] => {\n    logHeader('INIT');\n\n    if (!options.overwriteConfigFile) {\n        return overwriteNotAllowedProjectConfigFile(options);\n    }\n\n    return [\n        {\n            title: `Create config file: ${options.configFilePath}`,\n            task: async () => {\n                try {\n                    const { data } = await axios.get<InitResponse>(\n                        `/api/projects/init`,\n                        {\n                            params: {\n                                api_key: options.projectApiKey,\n                            },\n                        },\n                    );\n                    const translationFiles = data.translation_files.map(\n                        (translationFile): TranslationFile => {\n                            return {\n                                ...translationFile,\n                                directory: options.directory,\n                            };\n                        },\n                    );\n\n                    const projectConfig = createProjectConfig(\n                        options.projectApiKey,\n                        translationFiles,\n                    );\n                    saveProjectConfig(options.configFilePath, projectConfig);\n                } catch (error: any) {\n                    logError(error.message);\n                    return Promise.reject(error);\n                }\n            },\n        },\n    ];\n};\n","import axios from 'axios';\nimport {\n    getProjectConfig,\n    missingProjectConfigFile,\n    saveProjectConfig,\n} from '../lib/projectConfig';\nimport { Options } from '../lib/types';\nimport { logError, logHeader } from '../lib/log';\nimport { getUploadTasksFromTranslationFiles } from '../lib/task';\nimport { readContent } from '../lib/fileInfo';\nimport { ListrTask } from 'listr';\n\ninterface UploadResponse {\n    translation_file_id?: string;\n}\n\nexport default (options: Options): ListrTask[] => {\n    logHeader('UPLOAD');\n\n    if (!options.existsProjectConfigFile) {\n        return missingProjectConfigFile(options);\n    }\n\n    const projectConfig = getProjectConfig(options.configFilePath);\n    const taskList = getUploadTasksFromTranslationFiles(\n        projectConfig.translation_files,\n        async (translationFile, fileInfo): Promise<void> => {\n            try {\n                const { data } = await axios.post<UploadResponse>(\n                    `/api/translation-files/${\n                        translationFile.id ?? null\n                    }/upload`,\n                    {\n                        translation_file: translationFile,\n                        content: readContent(fileInfo.path),\n                    },\n                    {\n                        params: {\n                            overwrite: options.overwriteTranslations,\n                            locale: fileInfo.locale,\n                            api_key: projectConfig.project_api_key,\n                        },\n                    },\n                );\n                translationFile.id = data.translation_file_id;\n            } catch (error: any) {\n                logError(error.message);\n                return Promise.reject(error);\n            }\n        },\n    );\n\n    taskList.push({\n        title: `Modified config file: ${options.configFilePath}`,\n        task: () => {\n            saveProjectConfig(options.configFilePath, projectConfig);\n        },\n    });\n\n    return taskList;\n};\n","import axios from 'axios';\nimport fs from 'fs';\nimport inquirer from 'inquirer';\nimport path from 'path';\nimport yargs from 'yargs';\nimport { hideBin } from 'yargs/helpers';\nimport {\n    BASE_URL,\n    CURRENT_WORK_DIR,\n    DEBUG_BASE_URL,\n    DEBUG_FILENAME,\n    DEFAULT_API_KEY,\n    FILENAME,\n} from './lib/config';\nimport { Action, Options } from './lib/types';\nimport { init, upload, download } from './actions';\nimport { runTasks } from './lib/task';\nimport { ListrTask } from 'listr';\n\nconst actionFromString = (action: string): Action => {\n    switch (action) {\n        case 'init':\n            return Action.INIT;\n        case 'upload':\n            return Action.UPLOAD;\n        case 'download':\n            return Action.DOWNLOAD;\n        default:\n            return Action.NONE;\n    }\n};\n\nconst parseArgumentsIntoOptions = async (\n    rawArgs: string[],\n): Promise<Options> => {\n    const argv = await yargs(hideBin(rawArgs))\n        .epilogue(\n            'for more information, find our website at https://i18nature.com',\n        )\n        .usage(\n            'Command-line tool of I18Nature localization tool.\\n\\nUsage: $0 <cmd> [args]',\n        )\n        .command(\n            'init [project_api_key]',\n            'Create .i18naturerc.json file.',\n            (newYargs) => {\n                return newYargs.positional('project_api_key', {\n                    describe: 'project to bind on',\n                    default: DEFAULT_API_KEY,\n                });\n            },\n            (newArgv) => {\n                if (newArgv.verbose) {\n                    console.info(\n                        `create config file of: ${newArgv.project_api_key}`,\n                    );\n                }\n            },\n        )\n        .command(\n            'upload',\n            'Upload translation files.',\n            (newYargs) => newYargs,\n            (newArgv) => {\n                if (newArgv.verbose) {\n                    console.info(`upload translation file`);\n                }\n            },\n        )\n        .command(\n            'download',\n            'Download translation files.',\n            (newYargs) => newYargs,\n            (newArgv) => {\n                if (newArgv.verbose) {\n                    console.info(`download translation file`);\n                }\n            },\n        )\n        .options({\n            help: {\n                type: 'boolean',\n                alias: 'h',\n                description: 'Show help',\n                global: false,\n            },\n            verbose: {\n                type: 'boolean',\n                alias: 'v',\n                description: 'Run with verbose logging',\n                global: true,\n            },\n            yes: {\n                type: 'boolean',\n                alias: 'y',\n                description: 'Skip prompts',\n                global: true,\n            },\n            debug: {\n                type: 'boolean',\n                description: 'Debug mode',\n                global: true,\n            },\n            overwriteTranslations: {\n                type: 'boolean',\n                description: 'Overwrite translation files on upload',\n                global: true,\n            },\n        }).argv;\n\n    const configFileName = argv.debug ? DEBUG_FILENAME : FILENAME;\n    const configFilePath = path.join(CURRENT_WORK_DIR, configFileName);\n\n    return {\n        projectApiKey: argv.project_api_key as string,\n        skipPrompts: argv.yes ?? false,\n        verbose: argv.verbose ?? false,\n        debug: argv.debug ?? false,\n        overwriteConfigFile: argv.yes ?? false,\n        overwriteTranslations: argv.overwriteTranslations ?? false,\n        configFileName,\n        configFilePath,\n        directory: '',\n        existsProjectConfigFile: fs.existsSync(configFilePath),\n        action: actionFromString(argv._[0] as string),\n    };\n};\n\nconst promptForMissingOptions = async (options: Options): Promise<Options> => {\n    if (options.skipPrompts) {\n        return options;\n    }\n\n    const questions = [];\n    const isDefaultApiKey = options.projectApiKey === DEFAULT_API_KEY;\n\n    if (options.action === Action.INIT && options.existsProjectConfigFile) {\n        questions.push({\n            type: 'confirm',\n            name: 'overwriteConfigFile',\n            message: `Overwrite existing ${options.configFileName} file?`,\n            default: false,\n        });\n    }\n\n    if (options.action === Action.INIT) {\n        let projectConfig = {\n            project_api_key: options.projectApiKey,\n        };\n        if (options.existsProjectConfigFile) {\n            projectConfig = JSON.parse(\n                fs.readFileSync(options.configFilePath, 'utf8'),\n            );\n        }\n        questions.push({\n            type: 'input',\n            name: 'projectApiKey',\n            message: 'Project API key?',\n            default: projectConfig.project_api_key,\n            when: (newAnswers: any) =>\n                newAnswers.overwriteConfigFile || isDefaultApiKey,\n        });\n\n        questions.push({\n            type: 'input',\n            name: 'directory',\n            message: 'Relative path of translation files directory?',\n            default: 'i18n/locales',\n            when: (newAnswers: any) =>\n                newAnswers.overwriteConfigFile ||\n                !options.existsProjectConfigFile,\n        });\n    }\n\n    const answers = await inquirer.prompt(questions);\n    return {\n        ...options,\n        projectApiKey:\n            options.projectApiKey !== DEFAULT_API_KEY\n                ? options.projectApiKey\n                : answers.projectApiKey,\n        overwriteConfigFile:\n            answers.overwriteConfigFile || !options.existsProjectConfigFile,\n        directory: options.directory || answers.directory,\n    };\n};\n\nconst actionHandler = (options: Options): ListrTask[] => {\n    axios.defaults.baseURL = options.debug ? DEBUG_BASE_URL : BASE_URL;\n\n    switch (options.action) {\n        case Action.INIT:\n            return init(options);\n        case Action.UPLOAD:\n            return upload(options);\n        case Action.DOWNLOAD:\n            return download(options);\n        default:\n            return [];\n    }\n};\n\nexport default async (args: string[]): Promise<void> => {\n    let options = await parseArgumentsIntoOptions(args);\n    options = await promptForMissingOptions(options);\n    const taskList = actionHandler(options);\n\n    return runTasks(taskList);\n};\n","export { default } from './cli';\n","import axios from 'axios';\n\nexport const DEFAULT_API_KEY = 'API_KEY';\n\nexport const FILENAME = '.i18naturerc.json';\nexport const DEBUG_FILENAME = '.i18naturerc-debug.json';\nexport const CURRENT_WORK_DIR = process.cwd();\n\nexport const DEBUG_BASE_URL = 'http://0.0.0.0:80';\nexport const BASE_URL = 'https://app.i18nature.com';\n\nexport const GREEN_COLOR = '#0A4414';\n\nexport const INDENT = 2;\n\naxios.interceptors.response.use(\n    (response) => response,\n    (error) => {\n        const message = error.response?.data?.message ?? error.message;\n        return Promise.reject(new Error(message));\n    },\n);\n","import glob from 'glob';\nimport path from 'path';\nimport fs from 'fs';\nimport { CURRENT_WORK_DIR } from './config';\nimport { FileInfo, TranslationFile } from './types';\n\nconst _getGlobPatterns = (translatioFile: TranslationFile): string[] => {\n    const directory = translatioFile.directory ?? '';\n    const file = `${translatioFile.filename}.${translatioFile.extension}`;\n    const filePattern = path.join(CURRENT_WORK_DIR, directory, file);\n    const globPattern = _resolvePathPattern(filePattern, '*');\n\n    return [filePattern, globPattern];\n};\n\nconst _getLanguageFromLocale = (locale: string): string => {\n    return locale.replace('_', '-').split('-', 2)[0];\n};\n\nconst _getLocaleFrom = (\n    filePath: string,\n    filePattern: string,\n    locales: string[],\n): string | undefined => {\n    return locales.find((locale): boolean => {\n        return filePath === _resolvePathPattern(filePattern, locale);\n    });\n};\n\nconst _resolvePathPattern = (filePattern: string, locale: string): string => {\n    const language = locale === '*' ? '*' : _getLanguageFromLocale(locale);\n    return filePattern\n        .replace('%language', language)\n        .replace('%locale', locale);\n};\n\nexport const getUploadFileInfosOfTranslationFile = (\n    translationFile: TranslationFile,\n): FileInfo[] => {\n    const [filePattern, globPattern] = _getGlobPatterns(translationFile);\n    const files = glob.sync(globPattern);\n    const fileInfos: FileInfo[] = [];\n\n    files.forEach((filePath): void => {\n        const locale = _getLocaleFrom(\n            filePath,\n            filePattern,\n            translationFile.locales,\n        );\n        if (locale) {\n            fileInfos.push({\n                path: filePath,\n                locale,\n            });\n        }\n    });\n\n    return fileInfos;\n};\n\nexport const getDownloadFileInfosOfTranslationFile = (\n    translationFile: TranslationFile,\n): FileInfo[] => {\n    const [filePattern] = _getGlobPatterns(translationFile);\n    const fileInfos: FileInfo[] = [];\n\n    translationFile.locales.forEach((locale): void => {\n        const filePath = _resolvePathPattern(filePattern, locale);\n        fileInfos.push({\n            path: filePath,\n            locale,\n        });\n    });\n\n    return fileInfos;\n};\n\nexport const readContent = (filePath: string): string => {\n    return fs.readFileSync(filePath, 'utf8');\n};\n\nexport const writeContent = (filePath: string, content: string): void => {\n    return fs.writeFileSync(filePath, content);\n};\n","import chalk from 'chalk';\nimport { GREEN_COLOR } from './config';\n\nexport const logHeader = (title: string): void => {\n    return console.log(chalk.hex(GREEN_COLOR).bold(title));\n};\n\nexport const logError = (msg: string): void => {\n    return console.error(chalk.red.bold(msg));\n};\n","import fs from 'fs';\nimport { ListrTask } from 'listr';\nimport { INDENT } from './config';\nimport { Options, ProjectConfig, TranslationFile } from './types';\n\nexport const createProjectConfig = (\n    projectApiKey: string,\n    translationFiles: TranslationFile[],\n    version = 1,\n): ProjectConfig => {\n    return {\n        version,\n        project_api_key: projectApiKey,\n        translation_files: translationFiles,\n    };\n};\n\nexport const getProjectConfig = (configFilePath: string): ProjectConfig => {\n    const data = fs.readFileSync(configFilePath, 'utf8');\n\n    return JSON.parse(data) as ProjectConfig;\n};\n\nexport const saveProjectConfig = (\n    configFilePath: string,\n    projectConfig: ProjectConfig,\n): void => {\n    return fs.writeFileSync(\n        configFilePath,\n        JSON.stringify(projectConfig, null, INDENT),\n    );\n};\n\nexport const missingProjectConfigFile = (\n    options: Partial<Options>,\n): ListrTask[] => {\n    return [\n        {\n            title: `Missing config file: ${options.configFilePath}`,\n            task: () =>\n                Promise.reject(\n                    new Error('Create config file or init project!'),\n                ),\n        },\n    ];\n};\n\nexport const overwriteNotAllowedProjectConfigFile = (\n    options: Partial<Options>,\n): ListrTask[] => {\n    return [\n        {\n            title: `Create config file: ${options.configFilePath}`,\n            task: () =>\n                Promise.reject(\n                    new Error('Config file overwrite is not allowed!'),\n                ),\n        },\n    ];\n};\n","import Listr, { ListrTask } from 'listr';\nimport {\n    getDownloadFileInfosOfTranslationFile,\n    getUploadFileInfosOfTranslationFile,\n} from './fileInfo';\nimport { FileInfo, TranslationFile } from './types';\n\nexport const getUploadTasksFromTranslationFiles = (\n    translationFiles: TranslationFile[],\n    taskCallback: (\n        translationFile: TranslationFile,\n        fileInfo: FileInfo,\n    ) => Promise<void>,\n): ListrTask[] => {\n    return _getTasksFromTranslationFileData({\n        title: 'Upload translation file',\n        subtitle: 'Upload data of',\n        translationFiles,\n        fileInfoCallback: getUploadFileInfosOfTranslationFile,\n        taskCallback,\n    });\n};\n\nexport const getDownloadTasksFromTranslationFiles = (\n    translationFiles: TranslationFile[],\n    taskCallback: (\n        translationFile: TranslationFile,\n        fileInfo: FileInfo,\n    ) => Promise<void>,\n): ListrTask[] => {\n    return _getTasksFromTranslationFileData({\n        title: 'Download translation file',\n        subtitle: 'Download data of',\n        translationFiles,\n        fileInfoCallback: getDownloadFileInfosOfTranslationFile,\n        taskCallback,\n    });\n};\n\nconst _getTasksFromTranslationFileData = (data: {\n    title: string;\n    subtitle: string;\n    translationFiles: TranslationFile[];\n    fileInfoCallback: (translationFile: TranslationFile) => FileInfo[];\n    taskCallback: (\n        translationFile: TranslationFile,\n        fileInfo: FileInfo,\n    ) => Promise<void>;\n}): ListrTask[] => {\n    const taskList: ListrTask[] = [];\n\n    data.translationFiles.forEach(async (translationFile): Promise<void> => {\n        taskList.push({\n            title: `${data.title}: ${translationFile.name}`,\n            task: async () => {\n                const subTaskList: ListrTask[] = [];\n                const fileInfos = data.fileInfoCallback(translationFile);\n                fileInfos.forEach((fileInfo) => {\n                    subTaskList.push({\n                        title: `${data.subtitle}: ${fileInfo.path}`,\n                        task: async () => {\n                            await data.taskCallback(translationFile, fileInfo);\n                        },\n                    });\n                });\n\n                return new Listr(subTaskList);\n            },\n        });\n    });\n\n    return taskList;\n};\n\nexport const runTasks = async (taskList: ListrTask[]): Promise<void> => {\n    const tasks = new Listr(taskList);\n\n    return tasks.run().catch((reason): void => {\n        console.error(reason);\n    });\n};\n","export enum Action {\n    NONE,\n    INIT,\n    UPLOAD,\n    DOWNLOAD,\n}\n\nexport interface Options {\n    projectApiKey: string;\n    skipPrompts: boolean;\n    verbose: boolean;\n    overwriteConfigFile: boolean;\n    overwriteTranslations: boolean;\n    debug: boolean;\n    action: Action;\n    directory: string;\n    configFileName: string;\n    configFilePath: string;\n    existsProjectConfigFile: boolean;\n}\n\nexport interface TranslationFile {\n    id?: string;\n    name: string;\n    locales: string[];\n    default_locale: string;\n    filename: string;\n    extension: string;\n    wrapper_key?: string;\n    directory?: string;\n}\n\nexport interface ProjectConfig {\n    version: number;\n    project_api_key: string;\n    translation_files: TranslationFile[];\n}\n\nexport interface FileInfo {\n    path: string;\n    locale: string;\n}\n","module.exports = require(\"axios\");","module.exports = require(\"chalk\");","module.exports = require(\"glob\");","module.exports = require(\"inquirer\");","module.exports = require(\"listr\");","module.exports = require(\"yargs\");","module.exports = require(\"yargs/helpers\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(607);\n"],"names":["options","logHeader","existsProjectConfigFile","missingProjectConfigFile","projectConfig","getProjectConfig","configFilePath","getDownloadTasksFromTranslationFiles","translation_files","translationFile","fileInfo","get","id","params","locale","api_key","project_api_key","data","writeContent","path","content","logError","message","Promise","reject","default","overwriteConfigFile","title","task","projectApiKey","translationFiles","map","directory","createProjectConfig","saveProjectConfig","overwriteNotAllowedProjectConfigFile","taskList","getUploadTasksFromTranslationFiles","post","translation_file","readContent","overwrite","overwriteTranslations","translation_file_id","push","actionFromString","action","Action","INIT","UPLOAD","DOWNLOAD","NONE","promptForMissingOptions","skipPrompts","questions","isDefaultApiKey","DEFAULT_API_KEY","type","name","configFileName","JSON","parse","readFileSync","when","newAnswers","prompt","answers","args","rawArgs","hideBin","epilogue","usage","command","newYargs","positional","describe","newArgv","verbose","console","info","help","alias","description","global","yes","debug","argv","DEBUG_FILENAME","FILENAME","join","CURRENT_WORK_DIR","existsSync","_","defaults","baseURL","DEBUG_BASE_URL","BASE_URL","init","upload","download","actionHandler","runTasks","process","cwd","GREEN_COLOR","INDENT","interceptors","response","use","error","Error","_getGlobPatterns","translatioFile","file","filename","extension","filePattern","_resolvePathPattern","language","replace","split","_getLanguageFromLocale","getUploadFileInfosOfTranslationFile","globPattern","files","sync","fileInfos","forEach","filePath","locales","find","_getLocaleFrom","getDownloadFileInfosOfTranslationFile","writeFileSync","log","hex","bold","msg","red","version","stringify","taskCallback","_getTasksFromTranslationFileData","subtitle","fileInfoCallback","subTaskList","run","catch","reason","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}