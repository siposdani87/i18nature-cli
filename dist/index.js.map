{"version":3,"file":"index.js","mappings":"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","sources":["webpack://default/./src/actions/download.ts","webpack://default/./src/actions/index.ts","webpack://default/./src/actions/init.ts","webpack://default/./src/actions/upload.ts","webpack://default/./src/cli.ts","webpack://default/./src/index.ts","webpack://default/./src/lib/config.ts","webpack://default/./src/lib/fileInfo.ts","webpack://default/./src/lib/log.ts","webpack://default/./src/lib/model.ts","webpack://default/./src/lib/projectConfig.ts","webpack://default/./src/lib/task.ts","webpack://default/external commonjs \"axios\"","webpack://default/external commonjs \"chalk\"","webpack://default/external commonjs \"glob\"","webpack://default/external commonjs \"inquirer\"","webpack://default/external commonjs \"listr\"","webpack://default/external commonjs \"yargs\"","webpack://default/external commonjs \"yargs/helpers\"","webpack://default/external node-commonjs \"fs\"","webpack://default/external node-commonjs \"path\"","webpack://default/webpack/bootstrap","webpack://default/webpack/startup"],"sourcesContent":["import axios from 'axios';\nimport {\n    getProjectConfig,\n    missingProjectConfigFile,\n} from '../lib/projectConfig';\nimport { Options } from '../lib/model';\nimport { logHeader } from '../lib/log';\nimport { getDownloadTasksFromTranslationFiles } from '../lib/task';\nimport { writeContent } from '../lib/fileInfo';\nimport { ListrTask } from 'listr';\n\ninterface DownloadResponse {\n    content: string;\n}\n\nexport default (options: Options): ListrTask<any>[] => {\n    logHeader('DOWNLOAD');\n\n    if (!options.existsProjectConfigFile) {\n        return missingProjectConfigFile(options);\n    }\n\n    const projectConfig = getProjectConfig(options.configFilePath);\n    return getDownloadTasksFromTranslationFiles(\n        projectConfig.translation_files,\n        async (translationFile, fileInfo): Promise<void> => {\n            try {\n                const response = await axios.get<DownloadResponse>(\n                    `/api/translation-files/${\n                        translationFile.id ?? null\n                    }/download`,\n                    {\n                        params: {\n                            locale: fileInfo.locale,\n                            api_key: projectConfig.project_api_key,\n                        },\n                    },\n                );\n                writeContent(fileInfo.path, response.data.content);\n            } catch (error: any) {\n                return Promise.reject(\n                    new Error(error.response.data.message ?? error.message),\n                );\n            }\n        },\n    );\n};\n","export { default as download } from './download';\nexport { default as init } from './init';\nexport { default as upload } from './upload';\n","import axios from 'axios';\nimport { Options, TranslationFile } from '../lib/model';\nimport {\n    createProjectConfig,\n    overwriteNotAllowedProjectConfigFile,\n    saveProjectConfig,\n} from '../lib/projectConfig';\nimport { logHeader } from '../lib/log';\nimport { ListrTask } from 'listr';\n\ninterface InitResponse {\n    translation_files: TranslationFile[];\n    supported_languages: string[];\n}\n\nexport default (options: Options): ListrTask<any>[] => {\n    logHeader('INIT');\n\n    if (!options.overwriteConfigFile) {\n        return overwriteNotAllowedProjectConfigFile(options);\n    }\n\n    return [\n        {\n            title: `Create config file: ${options.configFilePath}`,\n            task: async () => {\n                try {\n                    const response = await axios.get<InitResponse>(\n                        `/api/projects/init`,\n                        {\n                            params: {\n                                api_key: options.projectApiKey,\n                            },\n                        },\n                    );\n                    const translationFiles =\n                        response.data.translation_files.map(\n                            (translationFile): TranslationFile => {\n                                return {\n                                    ...translationFile,\n                                    directory: options.directory,\n                                };\n                            },\n                        );\n\n                    const projectConfig = createProjectConfig(\n                        options.projectApiKey,\n                        translationFiles,\n                    );\n                    await saveProjectConfig(\n                        options.configFilePath,\n                        projectConfig,\n                    );\n                } catch (error: any) {\n                    return Promise.reject(\n                        new Error(error.response.data.message ?? error.message),\n                    );\n                }\n            },\n        },\n    ];\n};\n","import axios from 'axios';\nimport {\n    getProjectConfig,\n    missingProjectConfigFile,\n    saveProjectConfig,\n} from '../lib/projectConfig';\nimport { Options } from '../lib/model';\nimport { logHeader } from '../lib/log';\nimport { getUploadTasksFromTranslationFiles } from '../lib/task';\nimport { readContent } from '../lib/fileInfo';\nimport { ListrTask } from 'listr';\n\ninterface UploadResponse {\n    translation_file_id?: string;\n}\n\nexport default (options: Options): ListrTask<any>[] => {\n    logHeader('UPLOAD');\n\n    if (!options.existsProjectConfigFile) {\n        return missingProjectConfigFile(options);\n    }\n\n    const projectConfig = getProjectConfig(options.configFilePath);\n    const taskList = getUploadTasksFromTranslationFiles(\n        projectConfig.translation_files,\n        async (translationFile, fileInfo): Promise<void> => {\n            try {\n                const response = await axios.post<UploadResponse>(\n                    `/api/translation-files/${\n                        translationFile.id ?? null\n                    }/upload`,\n                    {\n                        translation_file: translationFile,\n                        content: readContent(fileInfo.path),\n                    },\n                    {\n                        params: {\n                            overwrite: options.overwriteTranslations,\n                            locale: fileInfo.locale,\n                            api_key: projectConfig.project_api_key,\n                        },\n                    },\n                );\n                translationFile.id =\n                    response.data.translation_file_id ?? translationFile.id;\n            } catch (error: any) {\n                return Promise.reject(\n                    new Error(error.response.data.message ?? error.message),\n                );\n            }\n        },\n    );\n\n    taskList.push({\n        title: `Modified config file: ${options.configFilePath}`,\n        task: async () => {\n            await saveProjectConfig(options.configFilePath, projectConfig);\n        },\n    });\n\n    return taskList;\n};\n","import axios from 'axios';\nimport fs from 'fs';\nimport inquirer from 'inquirer';\nimport path from 'path';\nimport yargs from 'yargs';\nimport { hideBin } from 'yargs/helpers';\nimport {\n    BASE_URL,\n    CURRENT_WORK_DIR,\n    DEBUG_BASE_URL,\n    DEBUG_FILENAME,\n    DEFAULT_API_KEY,\n    FILENAME,\n} from './lib/config';\nimport { Action, Options } from './lib/model';\nimport { init, upload, download } from './actions';\nimport { runTasks } from './lib/task';\nimport { ListrTask } from 'listr';\n\nconst actionFromString = (action: string): Action => {\n    switch (action) {\n        case 'init':\n            return Action.INIT;\n        case 'upload':\n            return Action.UPLOAD;\n        case 'download':\n            return Action.DOWNLOAD;\n        default:\n            return Action.NONE;\n    }\n};\n\nconst parseArgumentsIntoOptions = async (\n    rawArgs: string[],\n): Promise<Options> => {\n    const argv = await yargs(hideBin(rawArgs))\n        .epilogue(\n            'for more information, find our website at https://i18nature.com',\n        )\n        .usage(\n            'Command-line tool of I18Nature localization tool.\\n\\nUsage: $0 <cmd> [args]',\n        )\n        .command(\n            'init [project_api_key]',\n            'Create .i18naturerc.json file.',\n            (yargs) => {\n                return yargs.positional('project_api_key', {\n                    describe: 'project to bind on',\n                    default: DEFAULT_API_KEY,\n                });\n            },\n            (argv) => {\n                if (argv.verbose) {\n                    console.info(\n                        `create config file of: ${argv.project_api_key}`,\n                    );\n                }\n            },\n        )\n        .command(\n            'upload',\n            'Upload translation files.',\n            (yargs) => {\n                return yargs;\n            },\n            (argv) => {\n                if (argv.verbose) {\n                    console.info(`upload translation file`);\n                }\n            },\n        )\n        .command(\n            'download',\n            'Download translation files.',\n            (yargs) => {\n                return yargs;\n            },\n            (argv) => {\n                if (argv.verbose) {\n                    console.info(`download translation file`);\n                }\n            },\n        )\n        .options({\n            help: {\n                type: 'boolean',\n                alias: 'h',\n                description: 'Show help',\n                global: false,\n            },\n            verbose: {\n                type: 'boolean',\n                alias: 'v',\n                description: 'Run with verbose logging',\n                global: true,\n            },\n            yes: {\n                type: 'boolean',\n                alias: 'y',\n                description: 'Skip prompts',\n                global: true,\n            },\n            debug: {\n                type: 'boolean',\n                description: 'Debug mode',\n                global: true,\n            },\n            overwriteTranslations: {\n                type: 'boolean',\n                description: 'Overwrite translation files on upload',\n                global: true,\n            },\n        }).argv;\n\n    const configFileName = argv.debug ? DEBUG_FILENAME : FILENAME;\n    const configFilePath = path.join(CURRENT_WORK_DIR, configFileName);\n\n    return {\n        projectApiKey: argv.project_api_key,\n        skipPrompts: argv.yes || false,\n        verbose: argv.verbose || false,\n        debug: argv.debug || false,\n        overwriteConfigFile: false,\n        overwriteTranslations: argv.overwriteTranslations || false,\n        configFileName,\n        configFilePath,\n        directory: '',\n        existsProjectConfigFile: fs.existsSync(configFilePath),\n        action: actionFromString(argv._[0] as string),\n    };\n};\n\nconst promptForMissingOptions = async (options: Options): Promise<Options> => {\n    if (options.skipPrompts) {\n        return options;\n    }\n\n    const questions = [];\n    const isDefaultApiKey = options.projectApiKey === DEFAULT_API_KEY;\n\n    if (options.action === Action.INIT && options.existsProjectConfigFile) {\n        questions.push({\n            type: 'confirm',\n            name: 'overwriteConfigFile',\n            message: `Overwrite existing ${options.configFileName} file?`,\n            default: false,\n        });\n    }\n\n    if (options.action === Action.INIT) {\n        let projectConfig = {\n            project_api_key: options.projectApiKey,\n        };\n        if (options.existsProjectConfigFile) {\n            projectConfig = JSON.parse(\n                fs.readFileSync(options.configFilePath, 'utf8'),\n            );\n        }\n        questions.push({\n            type: 'input',\n            name: 'project_api_key',\n            message: 'Project API key?',\n            default: projectConfig.project_api_key,\n            when: (answers: any) =>\n                answers.overwriteConfigFile || isDefaultApiKey,\n        });\n\n        questions.push({\n            type: 'input',\n            name: 'directory',\n            message: 'Relative path of translation files directory?',\n            default: 'example/locales',\n            when: (answers: any) =>\n                answers.overwriteConfigFile || !options.existsProjectConfigFile,\n        });\n    }\n\n    const answers = await inquirer.prompt(questions);\n    return {\n        ...options,\n        projectApiKey:\n            options.projectApiKey !== DEFAULT_API_KEY\n                ? options.projectApiKey\n                : answers.project_api_key,\n        overwriteConfigFile:\n            answers.overwriteConfigFile || !options.existsProjectConfigFile,\n        directory: options.directory || answers.directory,\n    };\n};\n\nconst actionHandler = (options: Options): ListrTask<any>[] => {\n    axios.defaults.baseURL = options.debug ? DEBUG_BASE_URL : BASE_URL;\n\n    switch (options.action) {\n        case Action.INIT:\n            return init(options);\n        case Action.UPLOAD:\n            return upload(options);\n        case Action.DOWNLOAD:\n            return download(options);\n        default:\n            return [];\n    }\n};\n\nexport default async (args: string[]): Promise<void> => {\n    let options = await parseArgumentsIntoOptions(args);\n    options = await promptForMissingOptions(options);\n    const taskList = actionHandler(options);\n    return await runTasks(taskList);\n};\n","export { default } from './cli';\n","export const DEFAULT_API_KEY = 'API_KEY';\n\nexport const FILENAME = '.i18naturerc.json';\nexport const DEBUG_FILENAME = '.i18naturerc-debug.json';\nexport const CURRENT_WORK_DIR = process.cwd();\n\nexport const DEBUG_BASE_URL = 'http://localhost';\nexport const BASE_URL = 'https://app.i18nature.com';\n\nexport const GREEN_COLOR = '#0A4414';\n\nexport const INDENT = 2;\n","import glob from 'glob';\nimport path from 'path';\nimport fs from 'fs';\nimport { CURRENT_WORK_DIR } from './config';\nimport { FileInfo, TranslationFile } from './model';\n\nconst _getGlobPatterns = (translatioFile: TranslationFile): string[] => {\n    const directory = translatioFile.directory ?? '';\n    const file = `${translatioFile.filename}.${translatioFile.extension}`;\n    const filePattern = path.join(CURRENT_WORK_DIR, directory, file);\n    const globPattern = _resolvePathPattern(filePattern, '*');\n\n    return [filePattern, globPattern];\n};\n\nconst _getLanguageFromLocale = (locale: string): string => {\n    return locale.replace('_', '-').split('-', 2)[0];\n};\n\nconst _getLocaleFrom = (\n    filePath: string,\n    filePattern: string,\n    locales: string[],\n): string | undefined => {\n    return locales.find((locale): boolean => {\n        const path = _resolvePathPattern(filePattern, locale);\n        return path === filePath;\n    });\n};\n\nconst _resolvePathPattern = (filePattern: string, locale: string): string => {\n    const language = locale === '*' ? '*' : _getLanguageFromLocale(locale);\n    return filePattern\n        .replace('%language', language)\n        .replace('%locale', locale);\n};\n\nexport const getUploadFileInfosOfTranslationFile = (\n    translationFile: TranslationFile,\n): FileInfo[] => {\n    const [filePattern, globPattern] = _getGlobPatterns(translationFile);\n    const files = glob.sync(globPattern);\n    const fileInfos: FileInfo[] = [];\n\n    files.forEach((filePath): void => {\n        const locale = _getLocaleFrom(\n            filePath,\n            filePattern,\n            translationFile.locales,\n        );\n        if (locale) {\n            fileInfos.push({\n                path: filePath,\n                locale,\n            });\n        }\n    });\n\n    return fileInfos;\n};\n\nexport const getDownloadFileInfosOfTranslationFile = (\n    translationFile: TranslationFile,\n): FileInfo[] => {\n    const [filePattern] = _getGlobPatterns(translationFile);\n    const fileInfos: FileInfo[] = [];\n\n    translationFile.locales.forEach((locale): void => {\n        const filePath = _resolvePathPattern(filePattern, locale);\n        fileInfos.push({\n            path: filePath,\n            locale,\n        });\n    });\n\n    return fileInfos;\n};\n\nexport const readContent = (path: string): string => {\n    return fs.readFileSync(path, 'utf8');\n};\n\nexport const writeContent = (path: string, content: string): void => {\n    return fs.writeFileSync(path, content);\n};\n","import chalk from 'chalk';\nimport { GREEN_COLOR } from './config';\n\nexport const logHeader = (title: string): void => {\n    return console.log(chalk.hex(GREEN_COLOR).bold(title));\n};\n\nexport const logError = (msg: string): void => {\n    return console.error(chalk.red.bold(msg));\n};\n","export enum Action {\n    NONE,\n    INIT,\n    UPLOAD,\n    DOWNLOAD,\n}\n\nexport interface Options {\n    projectApiKey: string;\n    skipPrompts: boolean;\n    verbose: boolean;\n    overwriteConfigFile: boolean;\n    overwriteTranslations: boolean;\n    debug: boolean;\n    action: Action;\n    directory: string;\n    configFileName: string;\n    configFilePath: string;\n    existsProjectConfigFile: boolean;\n}\n\nexport interface TranslationFile {\n    id?: string;\n    name: string;\n    locales: string[];\n    default_locale: string;\n    filename: string;\n    extension: string;\n    wrapper_key: string;\n    directory?: string;\n}\n\nexport interface ProjectConfig {\n    version: number;\n    project_api_key: string;\n    translation_files: TranslationFile[];\n}\n\nexport interface FileInfo {\n    path: string;\n    locale: string;\n}\n","import fs from 'fs';\nimport { ListrTask } from 'listr';\nimport { INDENT } from './config';\nimport { Options, ProjectConfig, TranslationFile } from './model';\n\nexport const createProjectConfig = (\n    projectApiKey: string,\n    translationFiles: TranslationFile[],\n    version = 1,\n): ProjectConfig => {\n    return {\n        version,\n        project_api_key: projectApiKey,\n        translation_files: translationFiles,\n    };\n};\n\nexport const getProjectConfig = (configFilePath: string): ProjectConfig => {\n    const data = fs.readFileSync(configFilePath, 'utf8');\n\n    return JSON.parse(data) as ProjectConfig;\n};\n\nexport const saveProjectConfig = async (\n    configFilePath: string,\n    projectConfig: ProjectConfig,\n): Promise<void> => {\n    return fs.writeFileSync(\n        configFilePath,\n        JSON.stringify(projectConfig, null, INDENT),\n    );\n};\n\nexport const missingProjectConfigFile = (\n    options: Options,\n): ListrTask<any>[] => {\n    return [\n        {\n            title: `Missing config file: ${options.configFilePath}`,\n            task: () =>\n                Promise.reject(\n                    new Error('Create config file or init project!'),\n                ),\n        },\n    ];\n};\n\nexport const overwriteNotAllowedProjectConfigFile = (\n    options: Options,\n): ListrTask<any>[] => {\n    return [\n        {\n            title: `Create config file: ${options.configFilePath}`,\n            task: () =>\n                Promise.reject(\n                    new Error('Config file overwrite is not allowed!'),\n                ),\n        },\n    ];\n};\n","import Listr, { ListrTask } from 'listr';\nimport {\n    getDownloadFileInfosOfTranslationFile,\n    getUploadFileInfosOfTranslationFile,\n} from './fileInfo';\nimport { FileInfo, TranslationFile } from './model';\n\nexport const getUploadTasksFromTranslationFiles = (\n    translationFiles: TranslationFile[],\n    taskCallback: (\n        translationFile: TranslationFile,\n        fileInfo: FileInfo,\n    ) => Promise<void>,\n): ListrTask<any>[] => {\n    return _getTasksFromTranslationFileData({\n        title: 'Upload translation file',\n        subtitle: 'Upload data of',\n        translationFiles,\n        fileInfoCallback: getUploadFileInfosOfTranslationFile,\n        taskCallback,\n    });\n};\n\nexport const getDownloadTasksFromTranslationFiles = (\n    translationFiles: TranslationFile[],\n    taskCallback: (\n        translationFile: TranslationFile,\n        fileInfo: FileInfo,\n    ) => Promise<void>,\n): ListrTask<any>[] => {\n    return _getTasksFromTranslationFileData({\n        title: 'Download translation file',\n        subtitle: 'Download data of',\n        translationFiles,\n        fileInfoCallback: getDownloadFileInfosOfTranslationFile,\n        taskCallback,\n    });\n};\n\nconst _getTasksFromTranslationFileData = (data: {\n    title: string;\n    subtitle: string;\n    translationFiles: TranslationFile[];\n    fileInfoCallback: (translationFile: TranslationFile) => FileInfo[];\n    taskCallback: (\n        translationFile: TranslationFile,\n        fileInfo: FileInfo,\n    ) => Promise<void>;\n}): ListrTask<any>[] => {\n    const taskList: ListrTask<any>[] = [];\n\n    data.translationFiles.forEach(async (translationFile): Promise<void> => {\n        taskList.push({\n            title: `${data.title}: ${translationFile.name}`,\n            task: async () => {\n                const subTaskList: ListrTask<any>[] = [];\n                const fileInfos = data.fileInfoCallback(translationFile);\n                fileInfos.forEach((fileInfo) => {\n                    subTaskList.push({\n                        title: `${data.subtitle}: ${fileInfo.path}`,\n                        task: async () => {\n                            await data.taskCallback(translationFile, fileInfo);\n                        },\n                    });\n                });\n\n                return new Listr(subTaskList);\n            },\n        });\n    });\n\n    return taskList;\n};\n\nexport const runTasks = async (taskList: ListrTask<any>[]): Promise<void> => {\n    const tasks = new Listr(taskList);\n\n    return await tasks.run().catch((reason): void => {\n        console.log(reason);\n    });\n};\n","module.exports = require(\"axios\");","module.exports = require(\"chalk\");","module.exports = require(\"glob\");","module.exports = require(\"inquirer\");","module.exports = require(\"listr\");","module.exports = require(\"yargs\");","module.exports = require(\"yargs/helpers\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(607);\n"],"names":["options","logHeader","existsProjectConfigFile","missingProjectConfigFile","projectConfig","getProjectConfig","configFilePath","getDownloadTasksFromTranslationFiles","translation_files","translationFile","fileInfo","get","id","params","locale","api_key","project_api_key","response","writeContent","path","data","content","Promise","reject","Error","message","default","overwriteConfigFile","title","task","projectApiKey","translationFiles","map","directory","createProjectConfig","saveProjectConfig","overwriteNotAllowedProjectConfigFile","taskList","getUploadTasksFromTranslationFiles","post","translation_file","readContent","overwrite","overwriteTranslations","translation_file_id","push","actionFromString","action","Action","INIT","UPLOAD","DOWNLOAD","NONE","promptForMissingOptions","skipPrompts","questions","isDefaultApiKey","DEFAULT_API_KEY","type","name","configFileName","JSON","parse","readFileSync","when","answers","prompt","args","rawArgs","hideBin","epilogue","usage","command","yargs","positional","describe","argv","verbose","console","info","help","alias","description","global","yes","debug","DEBUG_FILENAME","FILENAME","join","CURRENT_WORK_DIR","existsSync","_","defaults","baseURL","DEBUG_BASE_URL","BASE_URL","init","upload","download","actionHandler","runTasks","process","cwd","GREEN_COLOR","INDENT","_getGlobPatterns","translatioFile","file","filename","extension","filePattern","_resolvePathPattern","language","replace","split","_getLanguageFromLocale","getUploadFileInfosOfTranslationFile","globPattern","files","sync","fileInfos","forEach","filePath","locales","find","_getLocaleFrom","getDownloadFileInfosOfTranslationFile","writeFileSync","log","hex","bold","logError","msg","error","red","version","stringify","taskCallback","_getTasksFromTranslationFileData","subtitle","fileInfoCallback","subTaskList","run","catch","reason","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}