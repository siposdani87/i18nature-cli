{"version":3,"file":"index.js","mappings":"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","sources":["webpack://default/./src/actions/download.ts","webpack://default/./src/actions/index.ts","webpack://default/./src/actions/init.ts","webpack://default/./src/actions/upload.ts","webpack://default/./src/cli.ts","webpack://default/./src/index.ts","webpack://default/./src/lib/config.ts","webpack://default/./src/lib/fileInfo.ts","webpack://default/./src/lib/log.ts","webpack://default/./src/lib/model.ts","webpack://default/./src/lib/projectConfig.ts","webpack://default/./src/lib/task.ts","webpack://default/external commonjs \"axios\"","webpack://default/external commonjs \"chalk\"","webpack://default/external commonjs \"glob\"","webpack://default/external commonjs \"inquirer\"","webpack://default/external commonjs \"listr\"","webpack://default/external commonjs \"yargs\"","webpack://default/external commonjs \"yargs/helpers\"","webpack://default/external node-commonjs \"fs\"","webpack://default/external node-commonjs \"path\"","webpack://default/webpack/bootstrap","webpack://default/webpack/startup"],"sourcesContent":["import axios from 'axios';\nimport {\n    getProjectConfig,\n    missingProjectConfigFile,\n} from '../lib/projectConfig';\nimport { Options } from '../lib/model';\nimport { logHeader } from '../lib/log';\nimport { getDownloadTasksFromTranslationFiles, runTasks } from '../lib/task';\nimport { writeContent } from '../lib/fileInfo';\n\ninterface DownloadResponse {\n    content: string;\n}\n\nexport default async (options: Options): Promise<void> => {\n    logHeader('DOWNLOAD');\n\n    if (!options.existsProjectConfigFile) {\n        return await missingProjectConfigFile(options);\n    }\n\n    const projectConfig = getProjectConfig(options.configFilePath);\n    const taskList = getDownloadTasksFromTranslationFiles(\n        projectConfig.translation_files,\n        async (translationFile, fileInfo): Promise<void> => {\n            try {\n                const response = await axios.get<DownloadResponse>(\n                    `/api/translation-files/${\n                        translationFile.id ?? null\n                    }/download`,\n                    {\n                        params: {\n                            locale: fileInfo.locale,\n                            api_key: projectConfig.project_api_key,\n                        },\n                    },\n                );\n                writeContent(fileInfo.path, response.data.content);\n            } catch (error: any) {\n                return Promise.reject(\n                    new Error(error.response.data.message ?? error.message),\n                );\n            }\n        },\n    );\n\n    await runTasks(taskList);\n};\n","export { default as download } from './download';\nexport { default as init } from './init';\nexport { default as upload } from './upload';\n","import axios from 'axios';\nimport { Options, TranslationFile } from '../lib/model';\nimport { createProjectConfig, saveProjectConfig } from '../lib/projectConfig';\nimport { logHeader } from '../lib/log';\nimport { runTasks } from '../lib/task';\n\ninterface InitResponse {\n    translation_files: TranslationFile[];\n    supported_languages: string[];\n}\n\nexport default async (options: Options): Promise<void> => {\n    logHeader('INIT');\n\n    if (!options.overwriteConfigFile) {\n        const taskList = [\n            {\n                title: `Create config file: ${options.configFilePath}`,\n                task: () =>\n                    Promise.reject(\n                        new Error('Config file overwrite is not allowed!'),\n                    ),\n            },\n        ];\n\n        return await runTasks(taskList);\n    }\n\n    const taskList = [\n        {\n            title: `Create config file: ${options.configFilePath}`,\n            task: async () => {\n                try {\n                    const response = await axios.get<InitResponse>(\n                        `/api/projects/init`,\n                        {\n                            params: {\n                                api_key: options.projectApiKey,\n                            },\n                        },\n                    );\n                    const translationFiles =\n                        response.data.translation_files.map(\n                            (translationFile): TranslationFile => {\n                                return {\n                                    ...translationFile,\n                                    directory: options.directory,\n                                };\n                            },\n                        );\n\n                    const projectConfig = createProjectConfig(\n                        options.projectApiKey,\n                        translationFiles,\n                    );\n                    await saveProjectConfig(\n                        options.configFilePath,\n                        projectConfig,\n                    );\n                } catch (error: any) {\n                    return Promise.reject(\n                        new Error(error.response.data.message ?? error.message),\n                    );\n                }\n            },\n        },\n    ];\n\n    await runTasks(taskList);\n};\n","import axios from 'axios';\nimport {\n    getProjectConfig,\n    missingProjectConfigFile,\n    saveProjectConfig,\n} from '../lib/projectConfig';\nimport { Options } from '../lib/model';\nimport { logHeader } from '../lib/log';\nimport { getUploadTasksFromTranslationFiles, runTasks } from '../lib/task';\nimport { readContent } from '../lib/fileInfo';\n\ninterface UploadResponse {\n    translation_file_id?: string;\n}\n\nexport default async (options: Options): Promise<void> => {\n    logHeader('UPLOAD');\n\n    if (!options.existsProjectConfigFile) {\n        return await missingProjectConfigFile(options);\n    }\n\n    const projectConfig = getProjectConfig(options.configFilePath);\n    const taskList = getUploadTasksFromTranslationFiles(\n        projectConfig.translation_files,\n        async (translationFile, fileInfo): Promise<void> => {\n            try {\n                const response = await axios.post<UploadResponse>(\n                    `/api/translation-files/${\n                        translationFile.id ?? null\n                    }/upload`,\n                    {\n                        translation_file: translationFile,\n                        content: readContent(fileInfo.path),\n                    },\n                    {\n                        params: {\n                            overwrite: options.overwriteTranslations,\n                            locale: fileInfo.locale,\n                            api_key: projectConfig.project_api_key,\n                        },\n                    },\n                );\n                translationFile.id =\n                    response.data.translation_file_id ?? translationFile.id;\n            } catch (error: any) {\n                return Promise.reject(\n                    new Error(error.response.data.message ?? error.message),\n                );\n            }\n        },\n    );\n\n    taskList.push({\n        title: `Modified config file: ${options.configFilePath}`,\n        task: async () => {\n            await saveProjectConfig(options.configFilePath, projectConfig);\n        },\n    });\n\n    await runTasks(taskList);\n};\n","import axios from 'axios';\nimport fs from 'fs';\nimport inquirer from 'inquirer';\nimport path from 'path';\nimport yargs from 'yargs';\nimport { hideBin } from 'yargs/helpers';\nimport {\n    BASE_URL,\n    CURRENT_WORK_DIR,\n    DEBUG_BASE_URL,\n    DEBUG_FILENAME,\n    DEFAULT_API_KEY,\n    FILENAME,\n} from './lib/config';\nimport { Action, Options } from './lib/model';\nimport { init, upload, download } from './actions';\n\nconst actionFromString = (action: string): Action => {\n    switch (action) {\n        case 'init':\n            return Action.INIT;\n        case 'upload':\n            return Action.UPLOAD;\n        case 'download':\n            return Action.DOWNLOAD;\n        default:\n            return Action.NONE;\n    }\n};\n\nconst parseArgumentsIntoOptions = async (\n    rawArgs: string[],\n): Promise<Options> => {\n    const argv = await yargs(hideBin(rawArgs))\n        .epilogue(\n            'for more information, find our website at https://i18nature.com',\n        )\n        .usage(\n            'Command-line tool of I18Nature localization tool.\\n\\nUsage: $0 <cmd> [args]',\n        )\n        .command(\n            'init [project_api_key]',\n            'Create .i18naturerc.json file.',\n            (yargs) => {\n                return yargs.positional('project_api_key', {\n                    describe: 'project to bind on',\n                    default: DEFAULT_API_KEY,\n                });\n            },\n            (argv) => {\n                if (argv.verbose) {\n                    console.info(\n                        `create config file of: ${argv.project_api_key}`,\n                    );\n                }\n            },\n        )\n        .command(\n            'upload',\n            'Upload translation files.',\n            (yargs) => {\n                return yargs;\n            },\n            (argv) => {\n                if (argv.verbose) {\n                    console.info(`upload translation file`);\n                }\n            },\n        )\n        .command(\n            'download',\n            'Download translation files.',\n            (yargs) => {\n                return yargs;\n            },\n            (argv) => {\n                if (argv.verbose) {\n                    console.info(`download translation file`);\n                }\n            },\n        )\n        .options({\n            help: {\n                type: 'boolean',\n                alias: 'h',\n                description: 'Show help',\n                global: false,\n            },\n            verbose: {\n                type: 'boolean',\n                alias: 'v',\n                description: 'Run with verbose logging',\n                global: true,\n            },\n            yes: {\n                type: 'boolean',\n                alias: 'y',\n                description: 'Skip prompts',\n                global: true,\n            },\n            debug: {\n                type: 'boolean',\n                description: 'Debug mode',\n                global: true,\n            },\n            overwriteTranslations: {\n                type: 'boolean',\n                description: 'Overwrite translation files on upload',\n                global: true,\n            },\n        }).argv;\n\n    const configFileName = argv.debug ? DEBUG_FILENAME : FILENAME;\n    const configFilePath = path.join(CURRENT_WORK_DIR, configFileName);\n\n    return {\n        projectApiKey: argv.project_api_key,\n        skipPrompts: argv.yes || false,\n        verbose: argv.verbose || false,\n        debug: argv.debug || false,\n        overwriteConfigFile: false,\n        overwriteTranslations: argv.overwriteTranslations || false,\n        configFileName,\n        configFilePath,\n        directory: '',\n        existsProjectConfigFile: fs.existsSync(configFilePath),\n        action: actionFromString(argv._[0] as string),\n    };\n};\n\nconst promptForMissingOptions = async (options: Options): Promise<Options> => {\n    if (options.skipPrompts) {\n        return options;\n    }\n\n    const questions = [];\n    const isDefaultApiKey = options.projectApiKey === DEFAULT_API_KEY;\n\n    if (options.action === Action.INIT && options.existsProjectConfigFile) {\n        questions.push({\n            type: 'confirm',\n            name: 'overwriteConfigFile',\n            message: `Overwrite existing ${options.configFileName} file?`,\n            default: false,\n        });\n    }\n\n    if (options.action === Action.INIT) {\n        let projectConfig = {\n            project_api_key: options.projectApiKey,\n        };\n        if (options.existsProjectConfigFile) {\n            projectConfig = JSON.parse(\n                fs.readFileSync(options.configFilePath, 'utf8'),\n            );\n        }\n        questions.push({\n            type: 'input',\n            name: 'project_api_key',\n            message: 'Project API key?',\n            default: projectConfig.project_api_key,\n            when: (answers: any) =>\n                answers.overwriteConfigFile || isDefaultApiKey,\n        });\n\n        questions.push({\n            type: 'input',\n            name: 'directory',\n            message: 'Relative path of translation files directory?',\n            default: 'example/locales',\n            when: (answers: any) =>\n                answers.overwriteConfigFile || !options.existsProjectConfigFile,\n        });\n    }\n\n    const answers = await inquirer.prompt(questions);\n    return {\n        ...options,\n        projectApiKey:\n            options.projectApiKey !== DEFAULT_API_KEY\n                ? options.projectApiKey\n                : answers.project_api_key,\n        overwriteConfigFile:\n            answers.overwriteConfigFile || !options.existsProjectConfigFile,\n        directory: options.directory || answers.directory,\n    };\n};\n\nconst actionHandler = async (options: Options): Promise<void> => {\n    axios.defaults.baseURL = options.debug ? DEBUG_BASE_URL : BASE_URL;\n\n    switch (options.action) {\n        case Action.INIT:\n            return await init(options);\n        case Action.UPLOAD:\n            return await upload(options);\n        case Action.DOWNLOAD:\n            return await download(options);\n        default:\n            break;\n    }\n};\n\nexport default async (args: string[]): Promise<void> => {\n    let options = await parseArgumentsIntoOptions(args);\n    options = await promptForMissingOptions(options);\n    await actionHandler(options);\n};\n","export { default } from './cli';\n","export const DEFAULT_API_KEY = 'API_KEY';\n\nexport const FILENAME = '.i18naturerc.json';\nexport const DEBUG_FILENAME = '.i18naturerc-debug.json';\nexport const CURRENT_WORK_DIR = process.cwd();\n\nexport const DEBUG_BASE_URL = 'http://localhost';\nexport const BASE_URL = 'https://app.i18nature.com';\n\nexport const GREEN_COLOR = '#0A4414';\n\nexport const INDENT = 2;\n","import glob from 'glob';\nimport path from 'path';\nimport fs from 'fs';\nimport { CURRENT_WORK_DIR } from './config';\nimport { FileInfo, TranslationFile } from './model';\n\nconst _getGlobPatterns = (translatioFile: TranslationFile): string[] => {\n    const directory = translatioFile.directory ?? '';\n    const file = `${translatioFile.filename}.${translatioFile.extension}`;\n    const filePattern = path.join(CURRENT_WORK_DIR, directory, file);\n    const globPattern = _resolvePathPattern(filePattern, '*');\n\n    return [filePattern, globPattern];\n};\n\nconst _getLanguageFromLocale = (locale: string): string => {\n    return locale.replace('_', '-').split('-', 2)[0];\n};\n\nconst _getLocaleFrom = (\n    filePath: string,\n    filePattern: string,\n    locales: string[],\n): string | undefined => {\n    return locales.find((locale): boolean => {\n        const path = _resolvePathPattern(filePattern, locale);\n        return path === filePath;\n    });\n};\n\nconst _resolvePathPattern = (filePattern: string, locale: string): string => {\n    const language = locale === '*' ? '*' : _getLanguageFromLocale(locale);\n    return filePattern\n        .replace('%language', language)\n        .replace('%locale', locale);\n};\n\nexport const getUploadFileInfosOfTranslationFile = (\n    translationFile: TranslationFile,\n): FileInfo[] => {\n    const [filePattern, globPattern] = _getGlobPatterns(translationFile);\n    const files = glob.sync(globPattern);\n    const results: FileInfo[] = [];\n\n    files.forEach((filePath): void => {\n        const locale = _getLocaleFrom(\n            filePath,\n            filePattern,\n            translationFile.locales,\n        );\n        if (locale) {\n            results.push({\n                path: filePath,\n                locale,\n            });\n        }\n    });\n\n    return results;\n};\n\nexport const getDownloadFileInfosOfTranslationFile = (\n    translationFile: TranslationFile,\n): FileInfo[] => {\n    const [filePattern] = _getGlobPatterns(translationFile);\n    const results: FileInfo[] = [];\n\n    translationFile.locales.forEach((locale): void => {\n        const filePath = _resolvePathPattern(filePattern, locale);\n        if (locale) {\n            results.push({\n                path: filePath,\n                locale,\n            });\n        }\n    });\n\n    return results;\n};\n\nexport const readContent = (path: string): string => {\n    return fs.readFileSync(path, 'utf8');\n};\n\nexport const writeContent = (path: string, content: string): void => {\n    return fs.writeFileSync(path, content);\n};\n","import chalk from 'chalk';\nimport { GREEN_COLOR } from './config';\n\nexport const logHeader = (title: string): void => {\n    return console.log(chalk.hex(GREEN_COLOR).bold(title));\n};\n\nexport const logError = (msg: string): void => {\n    return console.error(chalk.red.bold(msg));\n};\n","export enum Action {\n    NONE,\n    INIT,\n    UPLOAD,\n    DOWNLOAD,\n}\n\nexport interface Options {\n    projectApiKey: string;\n    skipPrompts: boolean;\n    verbose: boolean;\n    overwriteConfigFile: boolean;\n    overwriteTranslations: boolean;\n    debug: boolean;\n    action: Action;\n    directory: string;\n    configFileName: string;\n    configFilePath: string;\n    existsProjectConfigFile: boolean;\n}\n\nexport interface TranslationFile {\n    id?: string;\n    name: string;\n    locales: string[];\n    default_locale: string;\n    filename: string;\n    extension: string;\n    wrapper_key: string;\n    directory?: string;\n}\n\nexport interface ProjectConfig {\n    version: number;\n    project_api_key: string;\n    translation_files: TranslationFile[];\n}\n\nexport interface FileInfo {\n    path: string;\n    locale: string;\n}\n","import fs from 'fs';\nimport { INDENT } from './config';\nimport { Options, ProjectConfig, TranslationFile } from './model';\nimport { runTasks } from './task';\n\nexport const createProjectConfig = (\n    projectApiKey: string,\n    translationFiles: TranslationFile[],\n    version = 1,\n): ProjectConfig => {\n    const config = {\n        version,\n        project_api_key: projectApiKey,\n        translation_files: translationFiles,\n    };\n\n    return config;\n};\n\nexport const getProjectConfig = (configFilePath: string): ProjectConfig => {\n    const data = fs.readFileSync(configFilePath, 'utf8');\n\n    return JSON.parse(data) as ProjectConfig;\n};\n\nexport const saveProjectConfig = async (\n    configFilePath: string,\n    projectConfig: ProjectConfig,\n): Promise<void> => {\n    return fs.writeFileSync(\n        configFilePath,\n        JSON.stringify(projectConfig, null, INDENT),\n    );\n};\n\nexport const missingProjectConfigFile = async (\n    options: Options,\n): Promise<void> => {\n    const taskList = [\n        {\n            title: `Missing config file: ${options.configFilePath}`,\n            task: () =>\n                Promise.reject(\n                    new Error('Create config file or init project!'),\n                ),\n        },\n    ];\n\n    return await runTasks(taskList);\n};\n","import Listr from 'listr';\nimport {\n    getDownloadFileInfosOfTranslationFile,\n    getUploadFileInfosOfTranslationFile,\n} from './fileInfo';\nimport { FileInfo, TranslationFile } from './model';\n\nexport const getUploadTasksFromTranslationFiles = (\n    translationFiles: TranslationFile[],\n    taskCallback: (\n        translationFile: TranslationFile,\n        fileInfo: FileInfo,\n    ) => Promise<void>,\n): Listr.ListrTask<any>[] => {\n    return _getTasksFromTranslationFileData({\n        title: 'Upload translation file',\n        subtitle: 'Upload data of',\n        translationFiles,\n        fileInfoCallback: getUploadFileInfosOfTranslationFile,\n        taskCallback,\n    });\n};\n\nexport const getDownloadTasksFromTranslationFiles = (\n    translationFiles: TranslationFile[],\n    taskCallback: (\n        translationFile: TranslationFile,\n        fileInfo: FileInfo,\n    ) => Promise<void>,\n): Listr.ListrTask<any>[] => {\n    return _getTasksFromTranslationFileData({\n        title: 'Download translation file',\n        subtitle: 'Download data of',\n        translationFiles,\n        fileInfoCallback: getDownloadFileInfosOfTranslationFile,\n        taskCallback,\n    });\n};\n\nconst _getTasksFromTranslationFileData = (data: {\n    title: string;\n    subtitle: string;\n    translationFiles: TranslationFile[];\n    fileInfoCallback: (translationFile: TranslationFile) => FileInfo[];\n    taskCallback: (\n        translationFile: TranslationFile,\n        fileInfo: FileInfo,\n    ) => Promise<void>;\n}): Listr.ListrTask<any>[] => {\n    const taskList: Listr.ListrTask<any>[] = [];\n\n    data.translationFiles.forEach(async (translationFile): Promise<void> => {\n        taskList.push({\n            title: `${data.title}: ${translationFile.name}`,\n            task: async () => {\n                const subTaskList: Listr.ListrTask<any>[] = [];\n                const fileInfos = data.fileInfoCallback(translationFile);\n                fileInfos.forEach((fileInfo) => {\n                    subTaskList.push({\n                        title: `${data.subtitle}: ${fileInfo.path}`,\n                        task: async () => {\n                            await data.taskCallback(translationFile, fileInfo);\n                        },\n                    });\n                });\n\n                return new Listr(subTaskList);\n            },\n        });\n    });\n\n    return taskList;\n};\n\nexport const runTasks = async (\n    taskList: Listr.ListrTask<any>[],\n): Promise<void> => {\n    const tasks = new Listr(taskList);\n\n    return await tasks.run().catch((reason): void => {\n        console.log(reason);\n    });\n};\n","module.exports = require(\"axios\");","module.exports = require(\"chalk\");","module.exports = require(\"glob\");","module.exports = require(\"inquirer\");","module.exports = require(\"listr\");","module.exports = require(\"yargs\");","module.exports = require(\"yargs/helpers\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(607);\n"],"names":["options","logHeader","existsProjectConfigFile","missingProjectConfigFile","projectConfig","getProjectConfig","configFilePath","taskList","getDownloadTasksFromTranslationFiles","translation_files","translationFile","fileInfo","get","id","params","locale","api_key","project_api_key","response","writeContent","path","data","content","Promise","reject","Error","message","runTasks","default","overwriteConfigFile","title","task","projectApiKey","translationFiles","map","directory","createProjectConfig","saveProjectConfig","getUploadTasksFromTranslationFiles","post","translation_file","readContent","overwrite","overwriteTranslations","translation_file_id","push","actionFromString","action","Action","INIT","UPLOAD","DOWNLOAD","NONE","promptForMissingOptions","skipPrompts","questions","isDefaultApiKey","DEFAULT_API_KEY","type","name","configFileName","JSON","parse","readFileSync","when","answers","prompt","actionHandler","defaults","baseURL","debug","DEBUG_BASE_URL","BASE_URL","init","upload","download","args","rawArgs","hideBin","epilogue","usage","command","yargs","positional","describe","argv","verbose","console","info","help","alias","description","global","yes","DEBUG_FILENAME","FILENAME","join","CURRENT_WORK_DIR","existsSync","_","process","cwd","GREEN_COLOR","INDENT","_getGlobPatterns","translatioFile","file","filename","extension","filePattern","_resolvePathPattern","language","replace","split","_getLanguageFromLocale","getUploadFileInfosOfTranslationFile","globPattern","files","sync","results","forEach","filePath","locales","find","_getLocaleFrom","getDownloadFileInfosOfTranslationFile","writeFileSync","log","hex","bold","logError","msg","error","red","version","stringify","taskCallback","_getTasksFromTranslationFileData","subtitle","fileInfoCallback","subTaskList","run","catch","reason","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}